#Использовать json
#Использовать 1commands
#Использовать gitsync

Перем г_ПутьКФайлуНастроек;

Функция СохранитьНастройкиИВернутьSSH(СтрокаJSON) Экспорт

	Настройки = ПолучитьБазовыеНастройки();
	Парсер = Новый ПарсерJSON;
    Данные = Парсер.ПрочитатьJSON(СтрокаJSON,,,Истина);
    
	Если ТипЗнч(Данные) <> Тип("Соответствие") И ТипЗнч(Данные) <> Тип("Структура")  Тогда
		Возврат Настройки;
    КонецЕсли;

    Для каждого Объект Из Данные Цикл
		Настройки.Вставить(Объект.Ключ, Объект.Значение);
    КонецЦикла;

	Записать(Настройки);
	Настройки = СгенерироватьSSH();

	Возврат Парсер.ЗаписатьJSON(Настройки);

КонецФункции

Функция СгенерироватьSSH() Экспорт

	Настройки = ПолучитьДанныеНастроек();
		
	Команда = Новый Команда;
	Команда.УстановитьСтрокуЗапуска("cd");
	Команда.Исполнить();
	Выводcd = Команда.ПолучитьВывод();
	Выводcd = СтрЗаменить(Выводcd, Символы.ПС, "");

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;

	HostPort = ПолучитьHostPortПоUrl(Настройки.Hostname);
	
	Если ЭтоWindows Тогда
		Команда.УстановитьСтрокуЗапуска("ssh-keygen -b 2048 -t rsa -f %USERPROFILE%\.ssh\id_rsa -q -N """" <<< y");
		Команда.Исполнить();
		Команда.УстановитьСтрокуЗапуска("ssh-keyscan -p " + HostPort.Port + " " + HostPort.Host + " >> %USERPROFILE%\.ssh\known_hosts");
		Команда.Исполнить();
		Команда.УстановитьСтрокуЗапуска("type %USERPROFILE%\.ssh\id_rsa.pub");
		Команда.Исполнить();
		Ключ = Команда.ПолучитьВывод();
	Иначе
		Команда.УстановитьСтрокуЗапуска("ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N """" <<< y");
		Команда.Исполнить();
		Команда.УстановитьСтрокуЗапуска("ssh-keyscan -p " + HostPort.Port + " " + HostPort.Host + " >> ~\.ssh\known_hosts");
		Команда.Исполнить();
		Команда.УстановитьСтрокуЗапуска("cat ~/.ssh/id_rsa.pub");
		Команда.Исполнить();
		Ключ = Команда.ПолучитьВывод();
	КонецЕсли;

	Ключ = СтрЗаменить(Ключ, Символы.ПС, "");
	Настройки.Вставить("SSHkey", Ключ);
	Записать(Настройки);

	Возврат Настройки;

КонецФункции

Функция ПолучитьДанныеНастроек() Экспорт

    Настройки = ПолучитьБазовыеНастройки();

    Парсер = Новый ПарсерJSON;
    Данные = Парсер.ПрочитатьJSON(СодержимоеФайла(г_ПутьКФайлуНастроек),,,Истина);
    
	Если ТипЗнч(Данные) <> Тип("Соответствие") И ТипЗнч(Данные) <> Тип("Структура")  Тогда
		Возврат Настройки;
    КонецЕсли;

    Для каждого Объект Из Данные Цикл
		Настройки.Вставить(Объект.Ключ, Объект.Значение);
    КонецЦикла;

    Возврат Настройки;

КонецФункции

Функция СодержимоеФайла(п_ПутьКФайлу)
    
    Файл = Новый Файл(п_ПутьКФайлу);
    Если Не Файл.Существует() Тогда
        Содержимое = "[]";
    Иначе
        Текст = Новый ЧтениеТекста(п_ПутьКФайлу);
        Содержимое = Текст.Прочитать();
        Текст.Закрыть();
    КонецЕсли;
    
    Возврат Содержимое;
    
КонецФункции

Процедура Записать(Знач СтруктруаФайла) Экспорт

	Текст = Новый ЗаписьТекста(г_ПутьКФайлуНастроек);
	Запись = Новый ПарсерJSON;
	Текст.Записать(Запись.ЗаписатьJSON(СтруктруаФайла));
	Текст.Закрыть();

КонецПроцедуры

Функция ПолучитьHostPortПоUrl(Url)
	СтрукутраВозврата = Новый Структура();
	МСтроки = СтрРазделить(Url, ":");
	Если МСтроки.Количество() > 2 Тогда
		СтрукутраВозврата.Вставить("Port", МСтроки[2]);
		Url = МСтроки[0] + ":" + МСтроки[1];
	Иначе
		СтрукутраВозврата.Вставить("Port", 22);
	КонецЕсли;

	Url= СтрЗаменить(Url, "http://", "");
	Url= СтрЗаменить(Url, "https://", "");

	СтрукутраВозврата.Вставить("Host", Url);
	Возврат СтрукутраВозврата;

КонецФункции

Функция ПолучитьБазовыеНастройки()
	Возврат Новый Структура("Dir, Url, User, Password, PrivateToken, SSHkey, Hostname", "Директория", "Юрл", "Пользователь", "Пароль", "Токен", "SSHkey, localhost");
КонецФункции

г_ПутьКФайлуНастроек = "settings.json";